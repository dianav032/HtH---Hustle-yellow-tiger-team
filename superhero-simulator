import random

class Hero:
    def __init__(self, name, starting_health=100):
        '''Initialize Hero with a name and health values'''
        self.name = name
        self.starting_health = starting_health
        self.current_health = starting_health

    def battle(self, opponent):
        # '''Fight another hero and randomly declare a winner'''
        print(f"{self.name} battles {opponent.name}!")
        # Randomly choose winner
        winner = random.choice([self, opponent])
        print(f"{winner.name} wins the battle!")

if __name__ == "__main__":
    my_hero = Hero("Batman", 200)
    print(my_hero.name)
    print(my_hero.current_health)

    my_hero1 = Hero("Superman", 200)
    print(my_hero1.name)
    print(my_hero1.current_health)




    # ability.py
    import random

class Ability:
    """
    Represents a character's ability with a name and maximum damage.

    Attributes:
        name (str): The name of the ability.
        max_damage (int): The maximum damage this ability can inflict.

    Methods:
        attack():
            Returns a random integer between 0 and max_damage, simulating an attack.
    """
    def __init__(self, name, max_damage):
        self.name = name
        self.max_damage = int(max_damage)

    def attack(self):
        '''Return a random value between 0 and max_damage'''
        return random.randint(0, self.max_damage)





if __name__ == "__main__":
    energyblast = Ability("Energy blast", 50)
    print(energyblast.attack())




    # hero.py
import random
from ability import Ability
from armor import Armor

class Hero:

    def __init__(self, name, starting_health=100):
        '''Initialize Hero with a name and health values'''
        self.name = name
        self.starting_health = starting_health
        self.current_health = starting_health
        self.abilities = []
        self.armor = []

    def battle(self, opponent):
        '''Fight another hero and randomly select a winner'''
        self.opponent = opponent
        winner = random.choice([self, opponent])
        print(f"The winner is: {winner.name}")

    def add_ability(self, ability):
        self.abilities.append(ability)


        def sum_of_attack(self):
            total_damage = 0

            for ability in self.abilities:
                total_damage += ability.attack()

                return total_damage

    def add_armor(self, armor):
        self.armors.append(armor)
        

        

        def defend(self):
            total_block = 0

            for armor in self.armor:
                total_block += armor.block()
            return total_block

if __name__ == "__main__":
    my_hero = Hero("Batman", 200)
    print(my_hero.name)            # Batman
    print(my_hero.current_health)  # 200
    opponent_hero = Hero("Superman", 150)
    my_hero.battle(opponent_hero)


    # armor.py
    import random

class Armor:

    def __init__(self, name, max_block):
        self.name = name
        self.max_block = max_block

   
    def block(self):
        '''Return a random value between 0 and max_damage'''
        return random.randint(0, self.max_block)




if __name__ == "__main__":
    shield = Armor("Energy Blast", 20)
    print(shield.block())